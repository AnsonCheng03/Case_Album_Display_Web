const A=q=>{const t=window,_=location.pathname+location.search,r="_qCitySPA",m="_qCityHistoryPatch",v="_qCityBootstrap",u="_qCityInitPopstate",d="_qCityInitAnchors",y="_qCityInitVisibility",p="_qCityInitScroll",s="_qCityScrollEnabled",l="_qCityScrollDebounce",S="_qCityScroll",C=o=>{o&&t.scrollTo(o.x,o.y)},f=()=>{const o=document.documentElement;return{x:o.scrollLeft,y:o.scrollTop,w:Math.max(o.scrollWidth,o.clientWidth),h:Math.max(o.scrollHeight,o.clientHeight)}},h=o=>{const n=history.state||{};n[S]=o||f(),history.replaceState(n,"")};if(!t[r]&&!t[u]&&!t[d]&&!t[y]&&!t[p]){if(h(),t[u]=()=>{var o;if(!t[r]){if(t[s]=!1,clearTimeout(t[l]),_!==location.pathname+location.search){const c=q.closest("[q\\:container]").querySelector('a[q\\:key="AD_1"]');if(c){const e=c.closest("[q\\:container]"),i=c.cloneNode();i.setAttribute("q:nbs",""),i.style.display="none",e.appendChild(i),t[v]=i,i.click()}else location.reload()}else if(history.scrollRestoration==="manual"){const n=(o=history.state)==null?void 0:o[S];C(n),t[s]=!0}}},!t[m]){t[m]=!0;const o=history.pushState,n=history.replaceState,c=e=>(e===null||typeof e>"u"?e={}:(e==null?void 0:e.constructor)!==Object&&(e={_data:e},console.warn("In a Qwik SPA context, `history.state` is used to store scroll state. Direct calls to `pushState()` and `replaceState()` must supply an actual Object type. We need to be able to automatically attach the scroll state to your state object. A new state object has been created, your data has been moved to: `history.state._data`")),e._qCityScroll=e._qCityScroll||f(),e);history.pushState=(e,i,a)=>(e=c(e),o.call(history,e,i,a)),history.replaceState=(e,i,a)=>(e=c(e),n.call(history,e,i,a))}t[d]=o=>{if(t[r]||o.defaultPrevented)return;const n=o.target.closest("a[href]");if(n&&!n.hasAttribute("preventdefault:click")){const c=n.getAttribute("href"),e=new URL(location.href),i=new URL(c,e),a=i.origin===e.origin,w=i.pathname+i.search===e.pathname+e.search;if(a&&w)if(o.preventDefault(),i.href!==e.href&&history.pushState(null,"",i),!i.hash)i.href.endsWith("#")?window.scrollTo(0,0):(t[s]=!1,clearTimeout(t[l]),h({...f(),x:0,y:0}),location.reload());else{const g=i.hash.slice(1),b=document.getElementById(g);b&&b.scrollIntoView()}}},t[y]=()=>{!t[r]&&t[s]&&document.visibilityState==="hidden"&&h()},t[p]=()=>{t[r]||!t[s]||(clearTimeout(t[l]),t[l]=setTimeout(()=>{h(),t[l]=void 0},200))},t[s]=!0,setTimeout(()=>{addEventListener("popstate",t[u]),addEventListener("scroll",t[p],{passive:!0}),document.body.addEventListener("click",t[d]),t.navigation||document.addEventListener("visibilitychange",t[y],{passive:!0})},0)}};export{A as spa_init_DyVc0YBIqQU};
